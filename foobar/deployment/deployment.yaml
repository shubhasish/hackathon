Description: >
    This is an example of a long running ECS service that serves a JSON API of products.

Parameters: 


        
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String
        Default: dev

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 1


    Application:
        Description: Name of the application
        Type: String
        Default: "foobar"
    Version:
        Description: Name of the image
        Type: String
        Default: "latest"


Resources:

    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            Cluster:
              Ref: Cluster
            Role:
              Ref: ServiceRole
            DesiredCount:
              Ref: DesiredCount
            ServiceName:
              Ref: Application
            TaskDefinition:
              Ref: TaskDefinition
            LoadBalancers: 
                - ContainerName:
                     Ref: Application
                  ContainerPort: 8080
                  TargetGroupArn:
                     Ref: TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family:
               Ref: Application
            TaskRoleArn: "arn:aws:iam::266394801394:role/ECSROLE"
            ContainerDefinitions:
                - Name:
                    Ref: Application
                  Essential: true
                  Image:
                    Fn::Sub: "shubhashish/${Application}:${Version}"
                  MemoryReservation: 512
                  Memory: 1024
                  Cpu: 0
                  PortMappings:
                    - HostPort: 0
                      ContainerPort: 8080
                      Protocol: "tcp"
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group:
                            Ref: myLogGroup
                        awslogs-region:
                            Ref: AWS::Region
                        awslogs-stream-prefix:
                            Ref: Cluster
                  Environment:
                    -
                      Name: "ARGS"
                      Value:
                        Ref: "--database.host=18.208.207.167 --database.port=3306 --database.name=foobar --database.username=root --database.password=root --gmaps.apiKey=AIzaSyDHdgx1xtN55k5vo7Y02WLCJGCu8s3dqvw --gmaps.baseUrl=ASAS"
    myLogGroup:
        Type: "AWS::Logs::LogGroup"
        Properties:
            RetentionInDays: 1
            LogGroupName:
                Fn::Sub: "ECS-${Cluster}"

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId:
               Fn::ImportValue:
                   Fn::Sub: "${Cluster}-VPC"
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: "/pool/healthCheck"
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        DependsOn: TargetGroup
        Properties:
          Actions:
            -
              Type: forward
              TargetGroupArn:
                Ref: TargetGroup
          Conditions:
            -
              Field: host-header
              Values:
                - Fn::Sub:
                     "foobar.${Cluster}.internal"
          ListenerArn:
            'Fn::ImportValue':
                 Fn::Sub: '${Cluster}-Listner'
          Priority: 3

#        Properties:
#            ListenerArn:
#               Fn::ImportValue:
#                   Fn::Sub: '${Cluster}-Listner'
#            Priority: 2
#            Conditions:
#                - Field: path-pattern
#                  Values:
#                    - "/techgig/*"
#            Actions:
#                - TargetGroupArn:
#                     Ref: TargetGroup
#                  Type: forward

    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
               Fn::Sub: "ecs-service-${AWS::StackName}"
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies:
                - PolicyName:
                     Fn::Sub: "ecs-service-${AWS::StackName}"
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }
